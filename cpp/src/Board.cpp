#include "../include/Board.hpp"
//private
Board::board Board::state = { 0ULL, 0ULL, 0ULL, 0ULL };
bool Board::playerToMove = 0;

const u64 Board::MASK_BORDER[] = {
  0b00000100000000010000000001000000000100000000011111,
  0b00001000000000100000000010000000001000000000111111,
  0b11111000000000100000000010000000001000000000100000,
  0b11111100000000010000000001000000000100000000010000
};
const u64 Board::MASK_MOVER_MEN[] = {
  0b00000111111111011111111101111111110111111111011111,
  0b00000011111111101111111110111111111011111111101111,
  0b11111011111111101111111110111111111011111111100000,
  0b11110111111111011111111101111111110111111111000000
};
const u64 Board::MASK_JUMPER_MEN[] = {
  0b00000000001111011110111101111011110111101111011110,
  0b00000000000111101111011110111101111011110111101111,
  0b01111011110111101111011110111101111011110000000000,
  0b11110111101111011110111101111011110111100000000000
};
const std::map<u64, std::vector<u64>> Board::MASK_KING_ATTACK = {
{0x1, {0b0,0b0,0b0,0b100001000001000010000010000100000100001000000}},
{0x2, {0b0,0b0,0b1000010001000000,0b10000100000100001000001000010000000}},
{0x4, {0b0,0b0,0b10000100010000100010000000,0b1000010000010000100000000}},
{0x8, {0b0,0b0,0b100001000100001000100001000100000000,0b100001000000000}},
{0x10, {0b0,0b0,0b1000010001000010001000010001000010001000000000,0b0}},
{0x20, {0b1,0b0,0b0,0b10000010000100000100001000001000010000010000000000}},
{0x40, {0b10,0b1,0b1000010000000000,0b100001000001000010000010000100000100000000000}},
{0x80, {0b100,0b10,0b10000100010000100000000000,0b10000100000100001000001000000000000}},
{0x100, {0b1000,0b100,0b100001000100001000100001000000000000,0b1000010000010000000000000}},
{0x200, {0b10000,0b1000,0b1000010001000010001000010001000010000000000000,0b100000000000000}},
{0x400, {0b1000010,0b100000,0b1000000000000000,0b10000010000100000100001000001000010000000000000000}},
{0x800, {0b10000100,0b1000001,0b10000100010000000000000000,0b100001000001000010000010000100000000000000000}},
{0x1000, {0b100001000,0b10000010,0b100001000100001000100000000000000000,0b10000100000100001000000000000000000}},
{0x2000, {0b1000010000,0b100000100,0b1000010001000010001000010001000000000000000000,0b1000010000000000000000000}},
{0x4000, {0b0,0b1000001000,0b10000100010000100010000100010000000000000000000,0b0}},
{0x8000, {0b10001000010,0b0,0b0,0b1000001000010000010000100000100000000000000000000}},
{0x10000, {0b100010000100,0b10000100000,0b10000100000000000000000000,0b10000010000100000100001000001000000000000000000000}},
{0x20000, {0b1000100001000,0b100001000001,0b100001000100001000000000000000000000,0b100001000001000010000010000000000000000000000}},
{0x40000, {0b10001000010000,0b1000010000010,0b1000010001000010001000010000000000000000000000,0b10000100000100000000000000000000000}},
{0x80000, {0b100000000000000,0b10000100000100,0b10000100010000100010000100000000000000000000000,0b1000000000000000000000000}},
{0x100000, {0b10000100010000100,0b1000000000000000,0b10000000000000000000000000,0b1000001000010000010000100000000000000000000000000}},
{0x200000, {0b100001000100001000,0b10000010000100000,0b100001000100000000000000000000000000,0b10000010000100000100001000000000000000000000000000}},
{0x400000, {0b1000010001000010000,0b100000100001000001,0b1000010001000010001000000000000000000000000000,0b100001000001000010000000000000000000000000000}},
{0x800000, {0b10000100000000000000,0b1000001000010000010,0b10000100010000100010000000000000000000000000000,0b10000100000000000000000000000000000}},
{0x1000000, {0b0,0b10000010000100000100,0b100001000100001000100000000000000000000000000000,0b0}},
{0x2000000, {0b100010000100010000100,0b0,0b0,0b100000100001000001000000000000000000000000000000}},
{0x4000000, {0b1000100001000100001000,0b100001000000000000000,0b100001000000000000000000000000000000,0b1000001000010000010000000000000000000000000000000}},
{0x8000000, {0b10001000010001000010000,0b1000010000010000100000,0b1000010001000010000000000000000000000000000000,0b10000010000100000100000000000000000000000000000000}},
{0x10000000, {0b100010000100000000000000,0b10000100000100001000001,0b10000100010000100000000000000000000000000000000,0b100001000001000000000000000000000000000000000}},
{0x20000000, {0b1000000000000000000000000,0b100001000001000010000010,0b100001000100001000000000000000000000000000000000,0b10000000000000000000000000000000000}},
{0x40000000, {0b100001000100001000100001000,0b10000000000000000000000000,0b100000000000000000000000000000000000,0b100000100001000000000000000000000000000000000000}},
{0x80000000, {0b1000010001000010001000010000,0b100000100001000000000000000,0b1000010001000000000000000000000000000000000000,0b1000001000010000000000000000000000000000000000000}},
{0x100000000, {0b10000100010000100000000000000,0b1000001000010000010000100000,0b10000100010000000000000000000000000000000000000,0b10000010000100000000000000000000000000000000000000}},
{0x200000000, {0b100001000000000000000000000000,0b10000010000100000100001000001,0b100001000100000000000000000000000000000000000000,0b100001000000000000000000000000000000000000000}},
{0x400000000, {0b0,0b100000100001000001000010000010,0b1000010001000000000000000000000000000000000000000,0b0}},
{0x800000000, {0b1000100001000100001000100001000,0b0,0b0,0b10000010000000000000000000000000000000000000000}},
{0x1000000000, {0b10001000010001000010001000010000,0b1000010000000000000000000000000,0b1000010000000000000000000000000000000000000000,0b100000100000000000000000000000000000000000000000}},
{0x2000000000, {0b100010000100010000100000000000000,0b10000100000100001000000000000000,0b10000100000000000000000000000000000000000000000,0b1000001000000000000000000000000000000000000000000}},
{0x4000000000, {0b1000100001000000000000000000000000,0b100001000001000010000010000100000,0b100001000000000000000000000000000000000000000000,0b10000010000000000000000000000000000000000000000000}},
{0x8000000000, {0b10000000000000000000000000000000000,0b1000010000010000100000100001000001,0b1000010000000000000000000000000000000000000000000,0b100000000000000000000000000000000000000000000}},
{0x10000000000, {0b1000010001000010001000010001000010000,0b100000000000000000000000000000000000,0b1000000000000000000000000000000000000000000000,0b10000000000000000000000000000000000000000000000}},
{0x20000000000, {0b10000100010000100010000100000000000000,0b1000001000010000000000000000000000000,0b10000000000000000000000000000000000000000000000,0b100000000000000000000000000000000000000000000000}},
{0x40000000000, {0b100001000100001000000000000000000000000,0b10000010000100000100001000000000000000,0b100000000000000000000000000000000000000000000000,0b1000000000000000000000000000000000000000000000000}},
{0x80000000000, {0b1000010000000000000000000000000000000000,0b100000100001000001000010000010000100000,0b1000000000000000000000000000000000000000000000000,0b10000000000000000000000000000000000000000000000000}},
{0x100000000000, {0b0,0b1000001000010000010000100000100001000001,0b10000000000000000000000000000000000000000000000000,0b0}},
{0x200000000000, {0b10001000010001000010001000010001000010000,0b0,0b0,0b0}},
{0x400000000000, {0b100010000100010000100010000100000000000000,0b10000100000000000000000000000000000000000,0b0,0b0}},
{0x800000000000, {0b1000100001000100001000000000000000000000000,0b100001000001000010000000000000000000000000,0b0,0b0}},
{0x1000000000000, {0b10001000010000000000000000000000000000000000,0b1000010000010000100000100001000000000000000,0b0,0b0}},
{0x2000000000000, {0b100000000000000000000000000000000000000000000,0b10000100000100001000001000010000010000100000,0b0,0b0}}
};
const std::map<u64, std::vector<u64>> Board::MASK_KING_ATTACK_WITHOUT_BORDER = {
  {0x1, {0b0,0b0,0b0,0b1000001000010000010000100000100001000000}},
  {0x2, {0b0,0b0,0b10001000000,0b100000100001000001000010000000}},
  {0x4, {0b0,0b0,0b100010000100010000000,0b10000010000100000000}},
  {0x8, {0b0,0b0,0b1000100001000100001000100000000,0b1000000000}},
  {0x10, {0b0,0b0,0b10001000010001000010001000010001000000000,0b0}},
  {0x20, {0b0,0b0,0b0,0b10000100000100001000001000010000010000000000}},
  {0x40, {0b0,0b0,0b10000000000,0b1000001000010000010000100000100000000000}},
  {0x80, {0b0,0b0,0b100010000100000000000,0b100000100001000001000000000000}},
  {0x100, {0b0,0b0,0b1000100001000100001000000000000,0b10000010000000000000}},
  {0x200, {0b0,0b0,0b10001000010001000010001000010000000000000,0b0}},
  {0x400, {0b1000000,0b0,0b0,0b10000100000100001000001000010000000000000000}},
  {0x800, {0b10000000,0b1000000,0b100010000000000000000,0b1000001000010000010000100000000000000000}},
  {0x1000, {0b100000000,0b10000000,0b1000100001000100000000000000000,0b100000100001000000000000000000}},
  {0x2000, {0b1000000000,0b100000000,0b10001000010001000010001000000000000000000,0b10000000000000000000}},
  {0x4000, {0b0,0b1000000000,0b100010000100010000100010000000000000000000,0b0}},
  {0x8000, {0b10001000000,0b0,0b0,0b1000010000010000100000100000000000000000000}},
  {0x10000, {0b100010000000,0b10000000000,0b100000000000000000000,0b10000100000100001000001000000000000000000000}},
  {0x20000, {0b1000100000000,0b100001000000,0b1000100001000000000000000000000,0b1000001000010000010000000000000000000000}},
  {0x40000, {0b10001000000000,0b1000010000000,0b10001000010001000010000000000000000000000,0b100000100000000000000000000000}},
  {0x80000, {0b0,0b10000100000000,0b100010000100010000100000000000000000000000,0b0}},
  {0x100000, {0b10000100010000000,0b0,0b0,0b1000010000010000100000000000000000000000000}},
  {0x200000, {0b100001000100000000,0b10000010000000000,0b1000100000000000000000000000000,0b10000100000100001000000000000000000000000000}},
  {0x400000, {0b1000010001000000000,0b100000100001000000,0b10001000010001000000000000000000000000000,0b1000001000010000000000000000000000000000}},
  {0x800000, {0b10000000000000000000,0b1000001000010000000,0b100010000100010000000000000000000000000000,0b100000000000000000000000000000}},
  {0x1000000, {0b0,0b10000010000100000000,0b1000100001000100000000000000000000000000000,0b0}},
  {0x2000000, {0b100010000100010000000,0b0,0b0,0b100001000001000000000000000000000000000000}},
  {0x4000000, {0b1000100001000100000000,0b100000000000000000000,0b1000000000000000000000000000000,0b1000010000010000000000000000000000000000000}},
  {0x8000000, {0b10001000010001000000000,0b1000010000010000000000,0b10001000010000000000000000000000000000000,0b10000100000100000000000000000000000000000000}},
  {0x10000000, {0b100010000000000000000000,0b10000100000100001000000,0b100010000100000000000000000000000000000000,0b1000001000000000000000000000000000000000}},
  {0x20000000, {0b0,0b100001000001000010000000,0b1000100001000000000000000000000000000000000,0b0}},
  {0x40000000, {0b100001000100001000100000000,0b0,0b0,0b100001000000000000000000000000000000000000}},
  {0x80000000, {0b1000010001000010001000000000,0b100000100000000000000000000,0b10001000000000000000000000000000000000000,0b1000010000000000000000000000000000000000000}},
  {0x100000000, {0b10000100010000000000000000000,0b1000001000010000010000000000,0b100010000000000000000000000000000000000000,0b10000100000000000000000000000000000000000000}},
  {0x200000000, {0b100000000000000000000000000000,0b10000010000100000100001000000,0b1000100000000000000000000000000000000000000,0b1000000000000000000000000000000000000000}},
  {0x400000000, {0b0,0b100000100001000001000010000000,0b10001000000000000000000000000000000000000000,0b0}},
  {0x800000000, {0b1000100001000100001000100000000,0b0,0b0,0b10000000000000000000000000000000000000000}},
  {0x1000000000, {0b10001000010001000010001000000000,0b1000000000000000000000000000000,0b10000000000000000000000000000000000000000,0b100000000000000000000000000000000000000000}},
  {0x2000000000, {0b100010000100010000000000000000000,0b10000100000100000000000000000000,0b100000000000000000000000000000000000000000,0b1000000000000000000000000000000000000000000}},
  {0x4000000000, {0b1000100000000000000000000000000000,0b100001000001000010000010000000000,0b1000000000000000000000000000000000000000000,0b10000000000000000000000000000000000000000000}},
  {0x8000000000, {0b0,0b1000010000010000100000100001000000,0b10000000000000000000000000000000000000000000,0b0}},
  {0x10000000000, {0b1000010001000010001000010001000000000,0b0,0b0,0b0}},
  {0x20000000000, {0b10000100010000100010000000000000000000,0b1000001000000000000000000000000000000,0b0,0b0}},
  {0x40000000000, {0b100001000100000000000000000000000000000,0b10000010000100000100000000000000000000,0b0,0b0}},
  {0x80000000000, {0b1000000000000000000000000000000000000000,0b100000100001000001000010000010000000000,0b0,0b0}},
  {0x100000000000, {0b0,0b1000001000010000010000100000100001000000,0b0,0b0}},
  {0x200000000000, {0b10001000010001000010001000010001000000000,0b0,0b0,0b0}},
  {0x400000000000, {0b100010000100010000100010000000000000000000,0b10000000000000000000000000000000000000000,0b0,0b0}},
  {0x800000000000, {0b1000100001000100000000000000000000000000000,0b100001000001000000000000000000000000000000,0b0,0b0}},
  {0x1000000000000, {0b10001000000000000000000000000000000000000000,0b1000010000010000100000100000000000000000000,0b0,0b0}},
  {0x2000000000000, {0b0,0b10000100000100001000001000010000010000000000,0b0,0b0}}
};
const u8 Board::OPPOSITE_DIRECTIONS[] = {2, 3, 0, 1};

u64 Board::getMSB(u64 bitboard) {
  bitboard|=(bitboard>>1);
  bitboard|=(bitboard>>2);
  bitboard|=(bitboard>>4);
  bitboard|=(bitboard>>8);
  bitboard|=(bitboard>>16);
  bitboard|=(bitboard>>32);
  bitboard++;
  bitboard>>=1;
  return bitboard;
}
u64 Board::getLSB(u64 bitboard) {
  return bitboard&(~bitboard+1);
}
u64 Board::setRightSideOfMSB(u64 bitboard) {
  bitboard|=(bitboard>>1);
  bitboard|=(bitboard>>2);
  bitboard|=(bitboard>>4);
  bitboard|=(bitboard>>8);
  bitboard|=(bitboard>>16);
  bitboard|=(bitboard>>32);
  return bitboard;
}
u64 Board::setLeftSideOfMSB(u64 bitboard) {
  return ~Board::setRightSideOfMSB(bitboard);
}
u64 Board::setRightSideOfLSB(u64 bitboard) {
  return Board::getLSB(bitboard)-1;
}
u64 Board::setLeftSideOfLSB(u64 bitboard) {
  return ~Board::setLeftSideOfLSB(bitboard);
}
u64 Board::getEmpty(Board::board state) {
  return (~(state.whiteMen|state.whiteKings|state.blackMen|state.blackKings))&Board::MASK_BOARD;
}
u64 Board::moveEvenSquares(u64 bitboard, u8 direction) {
  bitboard &= Board::MASK_EVEN_ROW;
  switch (direction) {
    case 0:
      bitboard = bitboard >> 4;
      break;
    case 1:
      bitboard = bitboard >> 5;
      break;
    case 2:
      bitboard = bitboard << 5;
      break;
    case 3:
      bitboard = bitboard << 6;
      break;
  }
  return bitboard;
}
u64 Board::moveOddSquares(u64 bitboard, u8 direction) {
  bitboard &= Board::MASK_ODD_ROW;
  switch (direction) {
    case 0:
      bitboard = bitboard >> 5;
      break;
    case 1:
      bitboard = bitboard >> 6;
      break;
    case 2:
      bitboard = bitboard << 4;
      break;
    case 3:
      bitboard = bitboard << 5;
      break;
  }
  return bitboard;
}
u64 Board::moveSquares(u64 bitboard, u8 direction) {
  return Board::moveEvenSquares(bitboard, direction)|Board::moveOddSquares(bitboard, direction);
}
u64 Board::getMenMovers(Board::board state, u8 direction) {
  u64 empty = Board::MASK_MOVER_MEN[direction]&Board::getEmpty(state);
  u8 oppositeDirection = Board::OPPOSITE_DIRECTIONS[direction];
  u64 movers = state.whiteMen&Board::moveSquares(empty, oppositeDirection);
  return movers;
}
u64 Board::getKingMoves(u64 king, Board::board state, u8 direction) {
  u64 empty = Board::getEmpty(state);
  u64 mask = Board::MASK_KING_ATTACK.at(king)[direction];
  u64 target = (~empty)&mask;
  if (direction <= 1)
    target = Board::setLeftSideOfMSB(target);
  else
    target = Board::setRightSideOfLSB(target);
  return target&mask;
}
std::vector<Board::move> Board::getKingsMovers(Board::board state, u8 direction) {
  std::vector<Board::move> moves;
  u64 kings = state.whiteKings;
  while (kings) {
    u64 king = Board::getLSB(kings);
    kings &= ~king;
    u64 landings = Board::getKingMoves(king, state, direction);
    while (landings) {
      u64 landing = Board::getLSB(landings);
      landings &= ~landing;
      Board::move mv = {{king, landing}, {0ULL, 0ULL}};
      moves.push_back(mv);
    }
  }
  return moves;
}
u64 Board::getJumperMen(Board::board state, u8 direction) {
  u64 jumpers = Board::getEmpty(state)&Board::MASK_JUMPER_MEN[direction];
  u8 oppositeDirection = Board::OPPOSITE_DIRECTIONS[direction];
  jumpers = Board::moveSquares(jumpers, oppositeDirection);
  jumpers &= state.blackMen|state.blackKings;
  jumpers = Board::moveSquares(jumpers, oppositeDirection);
  return jumpers&state.whiteMen;
}
Board::kingMoveChunk Board::getJumperKing (u64 king, Board::board state, u64 alreadyCaptured, u8 direction) {
  u64 empty = Board::getEmpty(state);
  u64 mask = Board::MASK_KING_ATTACK_WITHOUT_BORDER.at(king)[direction];
  u64 black = (state.blackMen|state.blackKings);
  u64 target = black&mask;
  if (target) {
    if (direction <= 1)
      target = Board::getMSB(target);
    else
      target = Board::getLSB(target);
    if (target&black&(~alreadyCaptured)) {
      u64 landing = Board::setRightSideOfMSB(target)&empty&mask;
      std::vector<u64> landings = {};
      while (landing) {
        u64 x = Board::getLSB(landing);
        landing &= ~x;
        landings.push_back(x);
      }
      if (landings.size()) {
        Board::kingMoveChunk result = {king, target, landings};
        return result;
      }
    }
  }
  throw std::invalid_argument("");
}
std::vector<Board::kingMoveChunk> Board::getJumperKings(Board::board state, u64 alreadyCaptured, u8 direction) {
  std::vector<Board::kingMoveChunk> data;
  u64 empty = Board::getEmpty(state);
  u64 whiteKings = state.whiteKings;
  while (whiteKings) {
    u64 king = Board::getLSB(whiteKings);
    whiteKings &= ~king;
    try {
      Board::kingMoveChunk kmc = Board::getJumperKing(king, state, alreadyCaptured, direction);
      data.push_back(kmc);
    } catch (const std::invalid_argument& e) {};
  }
  return data;
}
void Board::init(Board::board state, bool playerToMove) {
  Board::state = state;
  Board::playerToMove = playerToMove;
}
void Board::makeManMove(u64* man, Board::board* state, u8 direction) {
  state->whiteMen &= ~(*man);
  *man = Board::moveSquares(*man, direction);
  state->whiteMen |= *man;
}
u64 Board::makeManCapture(u64* man, Board::board* state, u8 direction) {
  Board::makeManMove(man, state, direction);
  u64 capture = *man;
  state->blackMen &= ~(capture);
  state->blackKings &= ~(capture);
  *man = Board::moveSquares(*man, direction);
  state->whiteMen |= *man;
  return capture;
}
void Board::makeKingMove(u64*king, Board::board* state, u64 landing) {
  state->whiteKings &= ~(*king);
  *king = landing;
  state->whiteKings |= *king;
}
void Board::makeKingCapture(u64*king, Board::board* state, u64 landing, u64 target) {
  state->blackMen &= ~target;
  state->blackKings &= ~target;
  Board::makeKingMove(king, state, landing);
}
void Board::calculateManCaptures(u64 man, Board::board state, u8 count, u8* n, Board::move mv, std::vector<Board::move>* found) {
  u64 jumpers[] = {
    Board::getJumperMen(state, 0),
    Board::getJumperMen(state, 1),
    Board::getJumperMen(state, 2),
    Board::getJumperMen(state, 3),
  };
  if (man&(jumpers[0]|jumpers[1]|jumpers[2]|jumpers[3])) {
    for (u8 i=0; i<4; i++) {
      if (!(man&jumpers[i]))
        continue;
      u64 _man = man;
      board _state = state;
      move _mv = mv;
      _mv.captures.push_back(Board::makeManCapture(&_man, &_state, i));
      Board::calculateManCaptures(_man, _state, count+1, n, _mv, found);
    }
  } else {
    if (count > *n) {
      *n = count;
      found->clear();
    }
    if (count == *n)
      found->push_back(mv);
  }
}
std::vector<Board::move> Board::getMenCaptures(Board::board state) {
  u64 jumpers[] = {
    Board::getJumperMen(state, 0),
    Board::getJumperMen(state, 1),
    Board::getJumperMen(state, 2),
    Board::getJumperMen(state, 3),
  };
  u8 n = 0;
  std::vector<move> found;
  for (u8 i=0; i<4; i++) {
    if (!jumpers[i])
      continue;
    while (jumpers[i]) {
      u64 man = Board::getLSB(jumpers[i]);
      u64 _man = man;
      jumpers[i] &= ~_man;
      board _state = state;
      u64 capture = Board::makeManCapture(&_man, &_state, i);
      move _mv = {{man, _man}, {capture}};
      Board::calculateManCaptures(_man, _state, 0, &n, _mv, &found);
    }
  }
  return found;
}
void Board::calculateKingCaptures(u64 king, Board::board state, u64 alreadyCaptured, u8 count, u8* n, Board::move mv, std::vector<Board::move>* found) {
  std::vector<kingMoveChunk> jumperKings;
  for (u8 i=0; i<4; i++) {
    try {
      jumperKings.push_back(Board::getJumperKing(king, state, alreadyCaptured, i));
    } catch (const std::invalid_argument& e) {};
  }
  if (jumperKings.size() == 0) {
    if (count > *n) {
      *n = count;
      found->clear();
    }
    if (count == *n)
      found->push_back(mv);
  } else {
    for (auto& jumperKing : jumperKings) {
      for (auto& landing : jumperKing.landing) {
        u64 _king = king;
        board _state = state;
        u64 _alreadyCaptured = alreadyCaptured|jumperKing.capture;
        Board::makeKingMove(&_king, &state, landing);
        Board::move _mv = mv;
        _mv.positions.push_back(_king);
        _mv.captures.push_back(jumperKing.capture);
        Board::calculateKingCaptures(_king, _state, _alreadyCaptured, count+1, n, _mv, found);
      }
    }
  }
}
std::vector<Board::move> Board::getKingsCaptures(Board::board state) {
  std::vector<kingMoveChunk> jumperKings[] = {
    Board::getJumperKings(state, 0ULL, 0),
    Board::getJumperKings(state, 0ULL, 1),
    Board::getJumperKings(state, 0ULL, 2),
    Board::getJumperKings(state, 0ULL, 3)
  };
  u8 n = 0;
  std::vector<move> found;
  for (u8 i=0; i<4; i++) {
    for (auto& jumperKing : jumperKings[i]) {
      for (auto& landing : jumperKing.landing) {
        u64 _man = jumperKing.from;
        board _state = state;
        Board::makeKingCapture(&_man, &_state, landing, jumperKing.capture);
        u64 _alreadyCaptured = jumperKing.capture;
        move _mv = {{jumperKing.from, _man}, {jumperKing.capture}};
        Board::calculateKingCaptures(_man, _state, _alreadyCaptured, 0, &n, _mv, &found);
      }
    }
  }
  return found;
}
std::vector<Board::move> getLegalMoves(Board::board state) {
  std::vector<Board::move> moves;
  // std::vector<std::vector<u64>> captures[] {
  //   Board::getMenCaptures(whiteMen, whiteKings, blackMen, blackKings),
  //   Board::getKingsCaptures(whiteMen, whiteKings, blackMen, blackKings)
  // };
  // if (captures[0].size() && captures[1].size()) {
  //   for (auto& capture: captures[0]) {
  //     move_struct m = {capture[0], capture[1], 0ULL}
  //   }
  // }
  return moves;
}

Board::board Board::getState() {
  return Board::state;
}
u64 Board::getWhiteMen() {
  return Board::state.whiteMen;
}
u64 Board::getWhiteKings() {
  return Board::state.whiteKings;
}
u64 Board::getBlackMen() {
  return Board::state.blackMen;
}
u64 Board::getBlackKings() {
  return Board::state.blackKings;
}
bool Board::getPlayerToMove() {
  return Board::playerToMove;
}
void Board::setState(Board::board state) {
  Board::state = state;
}
void Board::setWhiteMen(u64 whiteMen) {
  Board::state.whiteMen = whiteMen;
}
void Board::setWhiteKings(u64 whiteKings) {
  Board::state.whiteKings = whiteKings;
}
void Board::setBlackMen(u64 blackMen) {
  Board::state.blackMen = blackMen;
}
void Board::setBlackKings(u64 blackKings) {
  Board::state.blackKings = blackKings;
}
void Board::setPlayerToMove(bool playerToMove) {
  Board::playerToMove = playerToMove;
}
