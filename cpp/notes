#include <iostream>
#define R2(n)     n,     n + 2*64,     n + 1*64,     n + 3*64
#define R4(n) R2(n), R2(n + 2*16), R2(n + 1*16), R2(n + 3*16)
#define R6(n) R4(n), R4(n + 2*4 ), R4(n + 1*4 ), R4(n + 3*4 )

typedef unsigned long long int u64;
typedef char u8;

u64 table[256] = { R6(0), R6(2), R6(1), R6(3) };

extern "C" {
  u64 bitboard(u8 indices[], u8 length);
}

u64 bitboard(u8 indices[], u8 length) {
  u64 x = 0;
  for (u8 i=0; i<length; i++)
    x |= 1ULL << indices[i];
  return x;
}


u64 reverse(u64 n)
{
  // u64 reversed = table[n&0xff] << 56;
  // return reversed;
  return table[n&0xff]<<56|table[(n>>8)&0xff]<<48|table[(n>>16)&0xff]<<40|table[(n>>24)&0xff]<<32|table[(n>>32)&0xff]<<24|table[(n>>40)]<<16|table[(n>>48)&0xff]<<8|table[(n>>56)&0xff];
}

int main() {
  // u64 x = 11232131;
  // std::cout << x << std::endl;
  // std::cout << reverse(x) << std::endl;
  return 0;
}


const std::map<u64, u64> Board::MASK_KING_ATTACK = {
  {0: 0b00000_11000_01000_00100_00100_00010_00010_00001_00001_00000},
  {1: 0b00000_01100_10100_10010_00010_00001_00001_00000_00000_00000},
  {2: 0b00000_00110_01010_01001_10001_10000_00000_00000_00000_00000},
  {3: 0b00000_00011_00101_00100_01000_01000_10000_10000_00000_00000},
  {4: 0b00000_00001_00010_00010_00100_00100_01000_01000_10000_10000}, //ok
  {5: 0b10000_10000_10000_01000_01000_00100_00100_00010_00010_00001},
  {6: 0b11000_00000_11000_10100_00100_00010_00010_00001_00001_00000},
  {7: 0b01100_00000_01100_01010_10010_10001_00001_00000_00000_00000},
  {8: 0b00110_00000_01100_00101_01001_01000_10000_10000_00000_00000},
   {9: 0b00011_00000_00011_00010_00100_00100_01000_01000_10000_10000}, //ok
  {10: 0b01000_11000_00000_11000_01000_00100_00100_00010_00010_00001},
  {11: 0b10100_01100_00000_01100_10100_10010_00010_00001_00001_00000},
  {12: 0b01010_00110_00000_00110_01010_01001_10001_10000_00000_00000},
  {13: 0b00101_00011_00000_00011_00101_00100_01000_01000_10000_10000},
  {14: 0b00010_00001_00000_00001_00010_00010_00100_00100_01000_01000}, //ok
  {15: 0b01000_01000_10000_00000_10000_01000_01000_00100_00100_00010},
  {16: 0b00100_10100_11000_00000_11000_10100_00100_00010_00010_00001},
  {17: 0b10010_01010_01100_00000_01100_01010_10010_10001_00001_00000},
  {18: 0b01001_00101_00110_00000_00110_00101_01001_01000_10000_10000},
  {19: 0b00100_00010_00011_00000_00011_00010_00100_00100_01000_01000}, //ok
  {20: 0b00100_00100_01000_11000_00000_11000_01000_0010_00100_00010},
  {21: 0b00010_10010_10100_01100_00000_01100_10100_10010_00010_00001},
  {22: 0b10001_01001_01010_00110_00000_00110_01010_01001_10001_10000},
  {23: 0b01000_00100_00101_00011_00000_00011_00101_00100_01000_01000},
  {24: 0b00100_00010_00010_00001_00000_00001_00010_00010_00100_00100},
    //   1      2     3     4     5     6     7     8     9     10
};

{
  {0, {
    0ULL,
    0ULL,
    0ULL,
    0b00000_01000_01000_00100_00100_00010_00010_00001_00000_00000
  }},
  {1, {
    0ULL,
    0ULL,
    0b00000_01000_10000_00000_00000_00000_00000_00000_00000_00000,
    0b00000_00100_00100_00010_00010_00001_00000_00000_00000_00000
  }},
  {2, {
    0ULL,
    0ULL,
    0b00000_00100_01000_01000_10000_00000_00000_00000_00000_00000,
    0b00000_00010_00010_00001_00000_00000_00000_00000_00000_00000
  }},
  {3, {
    0ULL,
    0ULL,
    0b00000_00010_00100_00100_01000_01000_10000_00000_00000_00000,
    0b00000_01000_00000_00000_00000_00000_00000_00000_00000_00000
  }},
  {4, {
    0ULL,
    0ULL,
    0b00000_00001_00010_00010_00100_00100_01000_01000_10000_00000,
    0ULL
  }},
  {5, {
    0ULL,
    0ULL,
    0ULL,
    0b00000_00000_10000_01000_01000_00100_00100_00010_00010_00000
  }},
  {6, {
    // 0b10000_00000_00000_00000_00000_00000_00000_00000_00000_00000,
    0ULL,
    0ULL,
    0b00000_00000_10000_00000_00000_00000_00000_00000_00000_00000,
    0b00000_00000_01000_00100_00100_00010_00010_00001_00000_00000
  }},
  {7, {
    0ULL,
    0ULL,
    0b00000_00000_01000_01000_10000_00000_00000_00000_00000_00000,
    0b00000_00000_00100_00010_00010_00001_00000_00000_00000_00000
  }},
  {8, {
    0ULL,
    0ULL,
    0b00000_00000_00100_00100_01000_01000_10000_00000_00000_00000,
    0b00000_00000_00010_00001_00000_00000_00000_00000_00000_00000
  }},
  {9, {
    0ULL,
    0ULL,
    0b00000_00000_00010_00010_00100_00100_01000_01000_10000_00000,
    0ULL
  }},
  {10, {
    0b00000_01000_00000_00000_00000_00000_00000_00000_00000_00000,
    0ULL,
    0ULL,
    0b00000_00000_00000_01000_01000_00100_00100_00010_00010_00000
  }},
  {11, {
    0b00000_00100_00000_00000_00000_00000_00000_00000_00000_00000,
    0b00000_01000_00000_00000_00000_00000_00000_00000_00000_00000,
    0b00000_00000_00000_01000_10000_00000_00000_00000_00000_00000,
    0b00000_00000_00000_00100_00100_00010_00010_00001_00000_00000
  }},
  {12, {
    0b00000_00010_00000_00000_00000_00000_00000_00000_00000_00000,
    0b00000_00100_00000_00000_00000_00000_00000_00000_00000_00000,
    0b00000_00000_00000_00100_01000_01000_10000_00000_00000_00000,
    0b00000_00000_00000_00010_00010_00001_00000_00000_00000_00000
  }},
  {13, {
    0b00000_00001_00000_00000_00000_00000_00000_00000_00000_00000,
    0b00000_00010_00000_00000_00000_00000_00000_00000_00000_00000,
    0b00000_00000_00000_00010_00100_00100_01000_01000_10000_00000,
    0b00000_00000_00000_00001_00000_00000_00000_00000_00000_00000
  }},
  {14, {
    0ULL,
    0b00000_00001_00000_00000_00000_00000_00000_00000_00000_00000,
    0b00000_00000_00000_00001_00010_00010_00100_00100_01000_00000,
    0ULL
  }},
  {15, {
    0b00000_01000_00000_00000_00000_00000_00000_00000_00000_00000,
    0b00000_10000_00000_00000_00000_00000_00000_00000_00000_00000,
    0b00000_00000_00000_00010_00100_00100_01000_01000_10000_00000,
    0b00000_00000_00000_00001_00000_00000_00000_00000_00000_00000
  }},
  //    1     2     3     4     5     6     7     8     9     10
};
